//
//  LoginScreenViewController.swift
//  LoginScreen
//
//  Created Z on 1/16/20.
//  Copyright © 2020 Zyma. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class LoginScreenViewController: UIViewController, LoginScreenViewProtocol {

	var presenter: LoginScreenPresenterProtocol?
    let restorationIdentifierPassword = "password"
    let restorationIdentifierLogin = "login"
    @IBOutlet weak var containerView: UIView!
    @IBOutlet weak var containerLogoView: UIView!
    @IBOutlet weak var containerKeyboard: UIView!
    @IBOutlet weak var keyboardContainerViewHeightConstrain: NSLayoutConstraint!
    @IBOutlet weak var linkStackView: UIStackView!
    @IBOutlet weak var loginTextFild: UITextField!
    @IBOutlet weak var passwordTextFild: UITextField!
    @IBOutlet weak var logoLabel: UILabel!
    @IBOutlet weak var loginButton: UIButton!
    @IBOutlet weak var linkButton: UIButton!

    var passwordText: String = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        registerForKeyboardNotifications()
        
        self.loginButton.isEnabled = false
        self.loginButton.alpha = 0.5
        
        loginTextFild.delegate = self
        passwordTextFild.delegate = self
        passwordTextFild.restorationIdentifier = restorationIdentifierPassword
        loginTextFild.restorationIdentifier = restorationIdentifierLogin
    }
    
    @IBAction func editingDidEndTextField(_ sender: UITextField) {
        sender.resignFirstResponder()
    }
    
    @IBAction func changedLoginTextField(_ sender: UITextField) {
        guard let login = sender.text else { return }
        presenter?.checkLogin(login: login)
    }
    
    @IBAction func changedPasswordTextField(_ sender: UITextField) {
        guard let password = sender.text else { return }
        guard password.count > 0 else { return }
        guard let lastChar = password.last else { return }
        if (lastChar == "●" || passwordText.count != password.count - 1) {
            passwordText.removeAll()
            sender.text = ""
        }
        else {
            passwordText.append(lastChar)
            var passwordShow = password
            passwordShow.removeLast()
            passwordShow.append("●")
            sender.text = passwordShow
        }
        presenter?.checkPassword(password: passwordText)
    }
    
    @IBAction func clickLoginButton(_ sender: UIButton) {
        loginTextFild.resignFirstResponder()
        passwordTextFild.resignFirstResponder()
    }
    
    @IBAction func clickLinkButton(_ sender: UIButton) {
    }
    
    func switchOffLoginButton() {
        DispatchQueue.main.async {
            self.loginButton.isEnabled = false
            self.loginButton.alpha = 0.5
        }
    }
    
    func switchOnLoginButton() {
        DispatchQueue.main.async {
            self.loginButton.isEnabled = true
            self.loginButton.alpha = 1
        }
    }

    deinit {
        removeForKeyboardNotifications()
    }
}

extension LoginScreenViewController: UITextFieldDelegate {
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        
        if (textField.restorationIdentifier == "password") {
            changedPasswordTextField(textField)
        }
        else {
            changedLoginTextField(textField)
        }
        textField.resignFirstResponder()
        return true
    }
    
    func registerForKeyboardNotifications() {
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    func removeForKeyboardNotifications() {
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    @objc func keyboardWillShow(_ notification: Notification) {
        guard let userinfo = notification.userInfo else {return}
        guard let keyboadSize = (userinfo[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue else { return }
        keyboardContainerViewHeightConstrain.constant = keyboadSize.height - linkStackView.frame.size.height - 8 + loginTextFild.frame.size.height
    }
    
    @objc func keyboardWillHide() {
        keyboardContainerViewHeightConstrain.constant = 0
    }
}
